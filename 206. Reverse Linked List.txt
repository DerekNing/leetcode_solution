Reverse a singly linked list.
Difficulty: Easy


算法过程画个图示比较好理解，无非就是调整一下节点的指向同时更新变量值来向前遍历而已，只需要三个变量current, newHead, 临时变量after记录current.next
自己写的第一个版本：

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head: return
        current = head
        newHead = None
        while current and current.next:
            after = current.next
            current.next = newHead
            newHead = current
            current = after

        #forget the last node and cause a bug
        current.next = newHead
        newHead = current
        return newHead

这里开始想过习惯性加dummy节点，然而并不能也不需要，因为逆序以后dummy节点多出来无法处理不像其它问题可以返回dummy.next；
一定要记住while循环跳出时候还有最后一个节点没有处理，所以倒数那两行不要忘了；
当然最后一定不要忘记返回newHead；
执行/提交代码前可以自己脑补执行一下结果，看代码正确与否。

代码优化：主要问题是最后的一个节点需要额外处理，所以可以修改一下循环条件试试，去掉current.next这样就会在while循环内处理最后一个节点，以下是最终版本：

class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if not head: return
        current = head
        newHead = None
        while current:
            after = current.next
            current.next = newHead
            newHead = current
            current = after

        return newHead
